generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InteractionType {
  LIKE
  SHARE
  REPOST
}

enum NotificationType {
  POST_LIKE
  COMMENT
  COMMENT_LIKE
}

model User {
  id                String            @id @default(uuid())
  emailEncrypted    String
  emailHash         String            @unique
  name              String?
  provider          String
  providerId        String
  createdAt         DateTime          @default(now())
  avatarUrl         String?
  profileComplete   Boolean           @default(false)
  username          String?           @unique
  role              String            @default("USER")
  comments          Comment[]         @relation("UserComments")
  posts             Post[]            @relation("UserPosts")
  originalPosts     Post[]            @relation("OriginalAuthor")
  interactions      PostInteraction[]
  commentLikes      CommentLike[]
  savedPosts        SavedPost[]
  sentNotifications Notification[]    @relation("Actor") // created by this user
  notifications     Notification[] // received by this user
  followedLounges   Lounge[]          @relation("LoungeFollowers")

  @@unique([provider, providerId], name: "provider_providerId")
}

model Post {
  id            String            @id @default(uuid())
  authorId      String
  originalAuthorId String?
  title         String
  body          String
  imageUrl      String?
  loungeId      String?
  likes         Int               @default(0)
  shares        Int               @default(0)
  reposts       Int               @default(0)
  createdAt     DateTime          @default(now())
  comments      Comment[]         @relation("PostComments")
  author        User              @relation("UserPosts", fields: [authorId], references: [id])
  originalAuthor User?            @relation("OriginalAuthor", fields: [originalAuthorId], references: [id])
  lounge        Lounge?           @relation(fields: [loungeId], references: [id])
  interactions  PostInteraction[]
  savedBy       SavedPost[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  text      String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  parentId  String?
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likedBy   CommentLike[]
  notifications        Notification[]
}

model CommentLike {
  id        String   @id @default(uuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId], name: "one_like_per_user_per_comment")
}

model SavedPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId], name: "one_save_per_user_per_post")
}

model PostInteraction {
  id        String          @id @default(uuid())
  post      Post            @relation(fields: [postId], references: [id])
  postId    String
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  type      InteractionType
  createdAt DateTime        @default(now())

  @@unique([postId, userId, type], name: "one_interaction_per_user_per_post")
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  actor     User             @relation("Actor", fields: [actorId], references: [id])
  actorId   String
  post      Post?            @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment?         @relation(fields: [commentId], references: [id])
  commentId String?
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Lounge {
  id          String @id @default(uuid())
  name        String @unique
  description String @db.Text
  bannerUrl   String
  profileUrl  String
  posts       Post[]
  followers   User[]  @relation("LoungeFollowers")
}
