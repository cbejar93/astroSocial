name: Docker Image CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  FLY_REGISTRY: registry.fly.io/astrosocial
  VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      digest: ${{ steps.meta.outputs.digest }}
      image_ref: ${{ steps.meta.outputs.image_ref }}
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Fly registry
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl auth docker

      - name: Build image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: |
            VITE_API_BASE_URL=${{ env.VITE_API_BASE_URL }}
          tags: ${{ env.FLY_REGISTRY }}:${{ github.sha }}
          push: ${{ github.event_name == 'push' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image metadata
        id: meta
        env:
          IMAGE: ${{ env.FLY_REGISTRY }}:${{ github.sha }}
          DIGEST: ${{ steps.build-image.outputs.digest }}
        run: |
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "image_ref=$FLY_REGISTRY@${DIGEST}" >> "$GITHUB_OUTPUT"


  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy to development
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

        run: flyctl deploy --config fly.dev.toml --image ${{ needs.build.outputs.image_ref }}


  promote-production:
    runs-on: ubuntu-latest
    environment: prod
    needs:
      - build
      - deploy-dev
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy to production
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

        run: flyctl deploy --config fly.toml --image ${{ needs.build.outputs.image_ref }}

